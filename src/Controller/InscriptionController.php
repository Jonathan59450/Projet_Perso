<?php

declare(strict_types=1);

namespace App\Controller;

use App\Entity\User;
use App\Form\RegistrationFormType;
use Doctrine\ORM\EntityManagerInterface;
// Importation nÃ©cessaire pour gÃ©rer les erreurs de base de donnÃ©es courantes
use Doctrine\DBAL\Exception\UniqueConstraintViolationException; 
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;

class InscriptionController extends AbstractController
{
    #[Route('/inscription', name: 'app_inscription')]
    public function register(
        Request $request, 
        UserPasswordHasherInterface $userPasswordHasher, 
        EntityManagerInterface $entityManager
    ): Response {
        // CrÃ©e une nouvelle instance de l'entitÃ© User pour lier les donnÃ©es du formulaire
        $user = new User();
        
        // CrÃ©e le formulaire en se basant sur RegistrationFormType
        $form = $this->createForm(RegistrationFormType::class, $user);
        
        // GÃ¨re la requÃªte (soumission du formulaire)
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            
            // Hache le mot de passe avant de l'enregistrer en base de donnÃ©es
            $user->setPassword(
                $userPasswordHasher->hashPassword(
                    $user,
                    $form->get('plainPassword')->getData()
                )
            );
            
            // DÃ©finit le rÃ´le par dÃ©faut pour le nouvel utilisateur
            $user->setRoles(['ROLE_USER']);
            
            
            // AJOUT DU BLOC TRY...CATCH POUR Ã‰VITER LE CRASH 502/TCP
            try {
                // Persiste l'utilisateur en base de donnÃ©es
                $entityManager->persist($user);
                $entityManager->flush();
                
                // Modification de la redirection : vers la page d'accueil ('app_home')
                $this->addFlash('success', 'Votre compte a Ã©tÃ© crÃ©Ã© avec succÃ¨s ! Veuillez vous connecter pour commencer.');
                
                // ðŸš€ REDIRECTION VERS LA PAGE D'ACCUEIL APRÃˆS SUCCÃˆS ðŸš€
                return $this->redirectToRoute('app_accueil'); // <-- CORRIGÃ‰ POUR REDIRIGER VERS L'ACCUEIL

            } catch (UniqueConstraintViolationException $e) {
                // GÃ¨re l'erreur spÃ©cifique si l'email ou le username existe dÃ©jÃ 
                $this->addFlash('error', 'L\'adresse e-mail ou le nom d\'utilisateur est dÃ©jÃ  utilisÃ©. Veuillez en choisir un autre.');
                
                // On revient Ã  la page d'inscription pour rÃ©afficher le formulaire
                return $this->redirectToRoute('app_inscription');

            } catch (\Exception $e) {
                // GÃ¨re toute autre erreur inattendue (colonne manquante, problÃ¨me de connexion, etc.)
                $this->addFlash('error', 'Une erreur inattendue est survenue lors de l\'enregistrement. DÃ©tails pour le dÃ©veloppeur : ' . $e->getMessage());
                return $this->redirectToRoute('app_inscription');
            }
        }

        // Affiche le template, en lui passant la vue du formulaire
        return $this->render('inscription/index.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    // â›” LA MÃ‰THODE CONNEXION EST SUPPRIMÃ‰E ICI, CAR ELLE EST MAINTENANT DANS SecurityController â›”
}
